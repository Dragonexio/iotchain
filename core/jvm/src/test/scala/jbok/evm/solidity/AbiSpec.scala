package jbok.evm.solidity

import io.circe.Json
import io.circe.parser._
import jbok.common.CommonSpec
import scodec.bits._
import jbok.evm.solidity.Ast._
import jbok.evm.solidity.ABIDescription._

class AbiSpec extends CommonSpec {
  "encode solidity type" should {
    "encode int32" in {
      val param  = parse("-2").getOrElse(Json.Null)
      val result = IntType(32).encode(param)
      result.isRight shouldBe true
      result.right.get shouldBe List(hex"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe")
    }

    "encode int256" in {
      val param  = parse("-19999999999999999999999999999999999999999999999999999999999999").getOrElse(Json.Null)
      val result = IntType(256).encode(param)
      result.isRight shouldBe true
      result.right.get shouldBe List(hex"0xfffffffffffff38dd0f10627f5529bdb2c52d4846810af0ac000000000000001")
    }

    "encode bool" in {
      val param  = parse("true").getOrElse(Json.Null)
      val result = BoolType().encode(param)
      result.isRight shouldBe true
      result.right.get shouldBe List(hex"0x0000000000000000000000000000000000000000000000000000000000000001")
    }

    "encode address" in {
      val param  = parse("\"0x56d91a95B623F8900cAAafF11f586D4D54829c53\"").getOrElse(Json.Null)
      val result = AddressType().encode(param)
      result.isRight shouldBe true
      result.right.get shouldBe List(hex"0x00000000000000000000000056d91a95B623F8900cAAafF11f586D4D54829c53")
    }

    "encode string" in {
      val param = parse(
        "\" hello world hello world hello world hello world  hello world hello world hello world hello world  hello world hello world hello world hello world hello world hello world hello world hello world\""
      ).getOrElse(Json.Null)
      val result = StringType().encode(param)
      result.isRight shouldBe true
      result.right.get shouldBe List(
        hex"00000000000000000000000000000000000000000000000000000000000000c2",
        hex"2068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f2077",
        hex"6f726c642068656c6c6f20776f726c64202068656c6c6f20776f726c64206865",
        hex"6c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c",
        hex"64202068656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f",
        hex"20776f726c642068656c6c6f20776f726c642068656c6c6f20776f726c642068",
        hex"656c6c6f20776f726c642068656c6c6f20776f726c642068656c6c6f20776f72",
        hex"6c64000000000000000000000000000000000000000000000000000000000000"
      )
    }

    "encode bytes" in {
      val param = parse(
        "\"01234567890123456789012345678901234567890123456789012345678901234567890123456789\""
      ).getOrElse(Json.Null)
      val result = BytesType().encode(param)
      result.isRight shouldBe true
      result.right.get shouldBe List(
        hex"0000000000000000000000000000000000000000000000000000000000000028",
        hex"0123456789012345678901234567890123456789012345678901234567890123",
        hex"4567890123456789000000000000000000000000000000000000000000000000"
      )
    }
  }

  "decode solidity type" should {
    "decode int32" in {
      val value  = hex"0000000000000000000000000000000000000000000000000000000000001234"
      val result = IntType(32).decode(value)
      result.isRight shouldBe true
      result.right.get shouldBe Json.fromBigInt(4660)
    }

    "decode int256" in {
      val value  = hex"1234567890123456789012345678901234567890123456789012345678901234"
      val result = IntType(256).decode(value)
      result.isRight shouldBe true
      result.right.get shouldBe Json.fromBigInt(
        BigInt("8234104122419153896766082834368325185836758793849283143825308940974890684980"))
    }

    "decode bool" in {
      val value  = hex"0000000000000000000000000000000000000000000000000000000000000001"
      val result = BoolType().decode(value)
      result.isRight shouldBe true
      result.right.get shouldBe Json.True
    }

    "decode address" in {
      val value  = hex"000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c"
      val result = AddressType().decode(value)
      result.isRight shouldBe true
      result.right.get shouldBe Json.fromString("0xca35b7d915458ef540ade6068dfe2f44e8fa733c")
    }

    "decode string" in {
      val value =
        hex"000000000000000000000000000000000000000000000000000000000000002568656c6c6f20776f726c64212068656c6c6f20626c6f636b636861696e2120e4bda0e5a5bd000000000000000000000000000000000000000000000000000000"
      val result = StringType().decode(value)
      result.isRight shouldBe true
      result.right.get shouldBe Json.fromString("hello world! hello blockchain! 你好")
    }

    "decode bytes" in {
      val value =
        hex"000000000000000000000000000000000000000000000000000000000000002568656c6c6f20776f726c64212068656c6c6f20626c6f636b636861696e2120e4bda0e5a5bd000000000000000000000000000000000000000000000000000000"
      val result = BytesType().decode(value)
      result.isRight shouldBe true
      result.right.get shouldBe Json.fromString(
        "0x68656c6c6f20776f726c64212068656c6c6f20626c6f636b636861696e2120e4bda0e5a5bd")
    }
  }

  "encode array of solidity type" should {
    "encode uint256[]" in {
      val parameterType = ParameterType(IntType(256), List(0))
      val param         = parse("[[1, 2]]").getOrElse(Json.Null)
      val result        = FunctionDescription.encode(List(parameterType), param)
      result.isRight shouldBe true
      result.right.get shouldBe List(
        hex"0000000000000000000000000000000000000000000000000000000000000020",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000001",
        hex"0000000000000000000000000000000000000000000000000000000000000002"
      )
    }

    "encode uint256[2]" in {
      val parameterType = ParameterType(IntType(256), List(2))
      val param         = parse("[[1, 2]]").getOrElse(Json.Null)
      val result        = FunctionDescription.encode(List(parameterType), param)
      result.isRight shouldBe true
      result.right.get shouldBe List(
        hex"0000000000000000000000000000000000000000000000000000000000000001",
        hex"0000000000000000000000000000000000000000000000000000000000000002"
      )
    }

    "encode uint256[][]" in {
      val parameterType = ParameterType(IntType(256), List(0, 0))
      val param         = parse("[[[1, 2], [3, 4]]]").getOrElse(Json.Null)
      val result        = FunctionDescription.encode(List(parameterType), param)
      result.isRight shouldBe true
      result.right.get shouldBe List(
        hex"0000000000000000000000000000000000000000000000000000000000000020",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000040",
        hex"00000000000000000000000000000000000000000000000000000000000000a0",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000001",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000003",
        hex"0000000000000000000000000000000000000000000000000000000000000004"
      )
    }

    "encode uint256[2][]" in {
      val parameterType = ParameterType(IntType(256), List(2, 0))
      val param         = parse("[[[1, 2], [3, 4]]]").getOrElse(Json.Null)
      val result        = FunctionDescription.encode(List(parameterType), param)
      result.isRight shouldBe true
      result.right.get shouldBe List(
        hex"0000000000000000000000000000000000000000000000000000000000000020",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000001",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000003",
        hex"0000000000000000000000000000000000000000000000000000000000000004"
      )
    }

    "encode string[]" in {
      val parameterType = ParameterType(StringType(), List(0))
      val params = parse("[[\"one\", \"two\", \"three\"]]")
        .getOrElse(Json.Null)
      val result = FunctionDescription.encode(List(parameterType), params)
      result.isRight shouldBe true
      result.right.get shouldBe List(
        hex"0000000000000000000000000000000000000000000000000000000000000020",
        hex"0000000000000000000000000000000000000000000000000000000000000003",
        hex"0000000000000000000000000000000000000000000000000000000000000060",
        hex"00000000000000000000000000000000000000000000000000000000000000a0",
        hex"00000000000000000000000000000000000000000000000000000000000000e0",
        hex"0000000000000000000000000000000000000000000000000000000000000003",
        hex"6f6e650000000000000000000000000000000000000000000000000000000000",
        hex"0000000000000000000000000000000000000000000000000000000000000003",
        hex"74776f0000000000000000000000000000000000000000000000000000000000",
        hex"0000000000000000000000000000000000000000000000000000000000000005",
        hex"7468726565000000000000000000000000000000000000000000000000000000"
      )
    }

    "encode (uint[][],string[])" in {
      val inputs = List(
        ParameterType(UIntType(256), List(0, 0)),
        ParameterType(StringType(), List(0))
      )
      val params = parse("[[[1, 2], [3]], [\"one\", \"two\", \"three\"]]").getOrElse(Json.Null)
      val result = FunctionDescription.encode(inputs, params)
      result.isRight shouldBe true
      result.right.get shouldBe List(
        hex"0000000000000000000000000000000000000000000000000000000000000040",
        hex"0000000000000000000000000000000000000000000000000000000000000140",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000040",
        hex"00000000000000000000000000000000000000000000000000000000000000a0",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000001",
        hex"0000000000000000000000000000000000000000000000000000000000000002",
        hex"0000000000000000000000000000000000000000000000000000000000000001",
        hex"0000000000000000000000000000000000000000000000000000000000000003",
        hex"0000000000000000000000000000000000000000000000000000000000000003",
        hex"0000000000000000000000000000000000000000000000000000000000000060",
        hex"00000000000000000000000000000000000000000000000000000000000000a0",
        hex"00000000000000000000000000000000000000000000000000000000000000e0",
        hex"0000000000000000000000000000000000000000000000000000000000000003",
        hex"6f6e650000000000000000000000000000000000000000000000000000000000",
        hex"0000000000000000000000000000000000000000000000000000000000000003",
        hex"74776f0000000000000000000000000000000000000000000000000000000000",
        hex"0000000000000000000000000000000000000000000000000000000000000005",
        hex"7468726565000000000000000000000000000000000000000000000000000000"
      )
    }
  }

  "decode array of solidity type" should {
    "decode uint256[]" in {
      val inputs = ParameterType(UIntType(256), List(0))
      val param  = parse("[[3,4]]").getOrElse(Json.Null)
      val value =
        hex"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004"

      val result = FunctionDescription.decode(List(inputs), value)
      result.isRight shouldBe true
      result.right.get shouldBe param
    }

    "decode uint256[2]" in {
      val inputs = ParameterType(UIntType(256), List(2))
      val param  = parse("[[3,4]]").getOrElse(Json.Null)
      val value =
        hex"0x00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004"

      val result = FunctionDescription.decode(List(inputs), value)
      result.isRight shouldBe true
      result.right.get shouldBe param
    }

    "decode uint256[][]" in {
      val inputs = ParameterType(UIntType(256), List(0, 0))
      val param  = parse("[[[1,2],[3,4]]]").getOrElse(Json.Null)
      val value =
        hex"0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004"

      val result = FunctionDescription.decode(List(inputs), value)
      result.isRight shouldBe true
      result.right.get shouldBe param
    }

    "decode string[]" in {
      val inputs = ParameterType(StringType(), List(0))
      val param  = parse("[[\"one\", \"two\", \"three\"]]").getOrElse(Json.Null)
      val value =
        hex"0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000"

      val result = FunctionDescription.decode(List(inputs), value)
      result.isRight shouldBe true
      result.right.get shouldBe param
    }

    "decode uint[][], string[]" in {
      val inputs = List(
        ParameterType(UIntType(256), List(0, 0)),
        ParameterType(StringType(), List(0))
      )
      val param = parse("[[[1, 2], [3]], [\"one\", \"two\", \"three\"]]").getOrElse(Json.Null)
      val value =
        hex"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000"

      val result = FunctionDescription.decode(inputs, value)
      result.isRight shouldBe true
      result.right.get shouldBe param
    }
  }
}
